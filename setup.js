#!/usr/bin/env node

const fs = require("fs").promises
const path = require("path")
const crypto = require("crypto")

async function setup() {
  console.log("üöÄ Setting up SmileX AI Video Generator...\n")

  try {
    // Create necessary directories
    const directories = ["uploads", "videos", "logs", "ssl", "backups"]

    for (const dir of directories) {
      try {
        await fs.mkdir(dir, { recursive: true })
        console.log(`‚úÖ Created directory: ${dir}`)
      } catch (error) {
        if (error.code !== "EEXIST") {
          throw error
        }
      }
    }

    // Generate environment file if it doesn't exist
    try {
      await fs.access(".env")
      console.log("‚ö†Ô∏è  .env file already exists, skipping generation")
    } catch {
      console.log("üìù Generating .env file...")

      const jwtSecret = crypto.randomBytes(64).toString("hex")
      const encryptionKey = crypto.randomBytes(32).toString("hex")

      const envContent = `# Generated by setup script
NODE_ENV=development
PORT=3000
FRONTEND_URL=http://localhost:3000

# Security (CHANGE THESE IN PRODUCTION!)
JWT_SECRET=${jwtSecret}
ENCRYPTION_KEY=${encryptionKey}

# OpenAI Configuration (ADD YOUR API KEY)
OPENAI_API_KEY=sk-your-openai-api-key-here

# Database Configuration
DATABASE_URL=postgresql://postgres:password@localhost:5432/smilex_ai
REDIS_URL=redis://localhost:6379

# File Configuration
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=10485760

# Payment Configuration (ADD YOUR STRIPE KEYS)
STRIPE_SECRET_KEY=sk_test_your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# Email Configuration (CONFIGURE FOR PRODUCTION)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Content Moderation
ENABLE_OPENAI_MODERATION=true
ENABLE_CUSTOM_FILTERS=true

# Video Processing
WATERMARK_TEXT=SmileX AI
DEFAULT_VIDEO_QUALITY=1080p
PREMIUM_VIDEO_QUALITY=4K
`

      await fs.writeFile(".env", envContent)
      console.log("‚úÖ Generated .env file")
    }

    // Create nginx configuration
    const nginxConfig = `events {
    worker_connections 1024;
}

http {
    upstream app {
        server app:3000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        client_max_body_size 10M;
        
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /uploads/ {
            alias /usr/src/app/uploads/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /videos/ {
            alias /usr/src/app/videos/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}`

    await fs.writeFile("nginx.conf", nginxConfig)
    console.log("‚úÖ Created nginx configuration")

    // Create health check script
    const healthCheckScript = `const http = require('http');

const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/health',
    method: 'GET',
    timeout: 3000
};

const req = http.request(options, (res) => {
    if (res.statusCode === 200) {
        process.exit(0);
    } else {
        process.exit(1);
    }
});

req.on('error', () => {
    process.exit(1);
});

req.on('timeout', () => {
    req.destroy();
    process.exit(1);
});

req.end();`

    await fs.writeFile("healthcheck.js", healthCheckScript)
    console.log("‚úÖ Created health check script")

    // Create systemd service file
    const serviceFile = `[Unit]
Description=SmileX AI Video Generator
After=network.target

[Service]
Type=simple
User=node
WorkingDirectory=/opt/smilex-ai
ExecStart=/usr/bin/node server.js
Restart=always
RestartSec=10
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target`

    await fs.writeFile("smilex-ai.service", serviceFile)
    console.log("‚úÖ Created systemd service file")

    console.log("\nüéâ Setup completed successfully!\n")
    console.log("üìã Next steps:")
    console.log("1. Add your OpenAI API key to the .env file")
    console.log("2. Configure your database connection")
    console.log("3. Set up your payment processor (Stripe)")
    console.log("4. Configure email settings for notifications")
    console.log("5. Run: npm install")
    console.log("6. Run: npm start")
    console.log("\nüîí Security reminders:")
    console.log("- Change default JWT secret in production")
    console.log("- Use HTTPS in production")
    console.log("- Set up proper firewall rules")
    console.log("- Enable database encryption")
    console.log("- Configure backup strategies")
  } catch (error) {
    console.error("‚ùå Setup failed:", error.message)
    process.exit(1)
  }
}

setup()
